/*******************************
	NetScaler Checks
*******************************/
template Service "netscaler_env_details" {

	vars.netscaler_user = "icinga"
	vars.netscaler_password = "super_secret"
	vars.netscaler_ssl = true
}

apply Service "CPU" {
	import "netscaler_cpu_template"
	import "netscaler_env_details"

	assign where host.vars.hw_type == "Netscaler" && host.vars.ns_env == "my_netscaler_env_a"
}

apply Service "Mgmt CPU" {
	import "netscaler_mgmtcpu_template"
	import "netscaler_env_details"

	assign where host.vars.hw_type == "Netscaler" && host.vars.ns_env == "my_netscaler_env_a"
}

apply Service "MEM" {
	import "netscaler_mem_template"
	import "netscaler_env_details"

	assign where host.vars.hw_type == "Netscaler" && host.vars.ns_env == "my_netscaler_env_a"
}

apply Service "Disk 0" {
	import "netscaler_disk0_template"
	import "netscaler_env_details"

	assign where host.vars.hw_type == "Netscaler" && host.vars.ns_env == "my_netscaler_env_a"
}

apply Service "Disk 1" {
	import "netscaler_disk1_template"
	import "netscaler_env_details"

	assign where host.vars.hw_type == "Netscaler" && host.vars.ns_env == "my_netscaler_env_a"
}

apply Service "HA Status" {
	import "netscaler_ha_status_template"
	import "netscaler_env_details"

	assign where host.vars.hw_type == "Netscaler" && host.vars.ns_env == "my_netscaler_env_a"
}

apply Service "HA State" {
	import "netscaler_ha_state_template"
	import "netscaler_env_details"

	assign where host.vars.hw_type == "Netscaler" && host.vars.ns_env == "my_netscaler_env_a"
}

apply Service "Config Status" {
	import "netscaler_config_status_template"
	import "netscaler_env_details"

	assign where host.vars.hw_type == "Netscaler" && host.vars.ns_env == "my_netscaler_env_a"
}

apply Service "HW Info" {
	import "netscaler_hwinfo_template"
	import "netscaler_env_details"

	assign where host.vars.hw_type == "Netscaler" && host.vars.ns_env == "my_netscaler_env_a"
}

apply Service "Interfaces" {
	import "netscaler_interfaces_template"
	import "netscaler_env_details"

	assign where host.vars.hw_type == "Netscaler" && host.vars.ns_env == "my_netscaler_env_a"
}

apply Service "Load Balanced server status" {
	import "netscaler_server_template"
	import "netscaler_env_details"

	assign where host.vars.hw_type == "Netscaler" && host.vars.ns_env == "my_netscaler_env_a"
}

apply Service "STA Status " for (vpnverver in [ "my_vpnvserver" ] ) {
	import "netscaler_staserver_template"
	import "netscaler_env_details"

	vars.netscaler_objectname = vpnverver
	assign where host.vars.hw_type == "Netscaler" && host.vars.ns_env == "my_netscaler_env_a"
}

apply Service "VPNV Status " for (vpnverver in [ "my_vpnvserver_a"  ] ) {
	import "netscaler_vpnvserver_template"
	import "netscaler_env_details"

	vars.netscaler_objectname = vpnverver
	assign where host.vars.hw_type == "Netscaler" && host.vars.ns_env == "my_netscaler_env_a"
}

apply Service "LB Status " for (lbvserver in [ "my_lbvserver_a", "my_lbvserver_b" ] ) {
	import "netscaler_lbvserver_template"
	import "netscaler_env_details"

	vars.netscaler_objectname = lbvserver
	assign where host.vars.hw_type == "Netscaler" && host.vars.ns_env == "my_netscaler_env_a"
}

apply Service "Servicegroup Status " for (servicegroup in [ "my_servicegroup_a", "my_servicegroup_b" ] ) {
	import "netscaler_servicegroup_template"
	import "netscaler_env_details"

	vars.netscaler_objectname = servicegroup
	assign where host.vars.hw_type == "Netscaler" && host.vars.ns_env == "my_netscaler_env_a"
}

// Perfdata
apply Service "Perf Ctirix Sessions" {
	import "netscaler_performancedata_template"
	import "netscaler_env_details"

	vars.netscaler_objecttype = "aaa"
	vars.netscaler_objectname = "aaacuricasessions,aaacuricaonlyconn"
	assign where host.vars.hw_type == "Netscaler" && host.vars.ns_env == "my_netscaler_env_a"
}

apply Service "Perf TCP connections" {
	import "netscaler_performancedata_template"
	import "netscaler_env_details"

	vars.netscaler_objecttype = "ns"
	vars.netscaler_objectname = "tcpcurclientconn,tcpcurclientconnestablished,tcpcurserverconn,tcpcurserverconnestablished"
	assign where host.vars.hw_type == "Netscaler" && host.vars.ns_env == "my_netscaler_env_a"
}

// NTP
apply Service "NTP" {
	import "netscaler_ntp_template"
	import "netscaler_env_details"

	assign where host.vars.hw_type == "Netscaler" && host.vars.ns_env == "my_netscaler_env_a"
}

/* EOF */
